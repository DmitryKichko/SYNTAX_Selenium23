==========================================================================================

Selenium Class 1
Что такое тестирование программного обеспечения?
-- определение корректности и качества приложения

Сколько способов тестирования мы можем использовать?
-- ручное
-- автоматизация

Когда мы переходим к автоматизации?
-- после завершения ручного тестирования
-- когда среда стабильна
-- анализируем наш набор тестов и выбираем инструменты автоматизации

Какие еще инструменты для автоматизации мы знаем?
-- Selenium, UFT/QTP, Cucumber, TestNG, Katalon Studio, PlayWright.

Уровни тестирования?
-- Начальное/модульное тестирование (Unit test)
-- Приемочное тестирование
-- Системное тестирование
-- Интеграционное тестирование

Типы тестирования?
-- Функциональное тестирование
-- Нефункциональное тестирование
-- Тестирование производительности
-- Тестирование безопасности


Что такое Selenium?
Selenium == это набор инструментов, который помогает нам автоматизировать веб-приложения.
В основном он используется для проведения функционального тестирования.

Компоненты Selenium:
Selenium IDE --> интегрированная среда разработки
Selenium Grid --> плагин для firefox
Selenium WebDriver
Selenium RC --> удаленное управление

Что такое Selenium WebDriver?
Инструмент автоматизации с открытым исходным кодом, который позволяет нам
выполнять действия над веб-приложением.
WebDriver - это интерфейс

Преимущества Selenium WebDriver:
-- открытый исходный код
-- работает с различными языками программирования --> Java Ruby, C#, JavaScript, Python
-- работает с несколькими браузерами и поддерживает кроссбраузерное тестирование
-- независимость от ОС --> iOS, Linux, Windows

Недостатки Selenium WebDriver:
-- отсутствие технической поддержки
-- невозможно автоматизировать настольные десктопные приложения
-- нет встроенных отчетов
-- нельзя тестировать капчу, изображения, видео
-- требуется больше времени для создания тестовых примеров

===========================================================================================
Методы:

get() vs navigate()
-- navigate() может перемещаться назад, вперед и обновлять страницу
-- get() будет ждать полной загрузки страницы, а navigate()- нет
-- get() не сохраняет историю браузера, тогда как navigate() сохраняет.

close() vs quit()
-- close() закрывает текущую вкладку
-- quit() приведет к закрытию всего браузера

fullscreen() vs maximize()
-- maximize() развернет браузер, и вы все еще сможете видеть url, вкладки, закладки
-- fullscreen() развернет все веб-приложение.


